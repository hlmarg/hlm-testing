name: HLM DEV Slot

on: 
  workflow_dispatch:
    branches:
      - dev
      - main
  workflow_call:

env:
  #AZURE_FUNCTIONAPP_NAME: your-app-name    # set this to your application's name
  #AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.16.0'                      # set this to the node version to use (supports 8.x, 10.x, 12.x, 14.x)
  ARTIFACT_NAME: 'hlm-slot-test'
  ZIP_FILE_NAME: 'hlm-slot-test.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub action'
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        #ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results-fs.sarif'
        #severity: 'CRITICAL'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-fs.sarif'

    - name: Azure Login
      uses: Azure/login@v1.6.1
      with:
          creds: ${{ secrets.EXIT83_AZURE_SPN }}
    
    - name: Setup Node ${{ env.NODE_VERSION }} Environment
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: 'Resolve Project Dependencies Using Npm'
      shell: bash
      run: |
        cd myExpressApp
        npm install
    
    - name: Generate Artifact name
      id: artifact-name
      shell: bash
      run: |
        #echo "Creating the output"
        artname=$(echo "hlm-slot-test")
        echo "ArtifactName=$artname" >> $GITHUB_OUTPUT

    - name: Generate a zip files
      run: zip --symlinks -r ${{ env.ZIP_FILE_NAME }} ./*
      working-directory: ./myExpressApp

    - name: Upload build artifact 
      uses: actions/upload-artifact@v4
      with: 
        name: ${{ env.ARTIFACT_NAME }}
        path: ./myExpressApp/hlm-slot-test.zip
        retention-days: 1
        

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout GitHub action'
      uses: actions/checkout@v4
      
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: Azure Login
      uses: Azure/login@v1.6.1
      with:
          creds: ${{ secrets.EXIT83_AZURE_SPN }}
    
    - name: Slot Verification.
      shell: pwsh
      run: |
        $Slots=az webapp deployment slot list -n hlm-slots-test -g HernanMolina --query [].name -o tsv
        if ($Slots -contains "dev") {
          echo "Slot dev exists"
        } else {
          echo "Slot dev does not exists"
          az webapp deployment slot create -n hlm-slots-test -g HernanMolina -s dev
        }
        ##Create the Environment Varibles"
        $pathfile= './DevOps/variables/variables.json'
        $variables=Get-Content $pathfile |ConvertFrom-Json
        $varstodefine=$variables.Variables |where {$_.env -contains dev}
        foreach ($var in $varstodefine) {
          $varjson=@"
          {
            "name": "$var.key",
            "slotSetting": 
            "value": "$var.Value"
          }
          "@
          az webapp config appsettings set --name $env:webapp -g $env:rg_name --settings ($var.key + "=" + $var.Value) -slot dev -o none
          az webapp config appsettings set --name $env:webapp -g $env:rg_name --settings ($var.key + "=" + $var.Value) -s dev -o none
        }
   
## Deploy alternatives for WebApps

    - name: 'Deploy WebApp'
      uses: azure/webapps-deploy@v3
      with:
        app-name: hlm-slots-test
        package: ${{ env.ZIP_FILE_NAME }}
       # publish-profile: ${{ steps.publishprofile.outputs.profile }}
        startup-command: 'npm start'
        slot-name: 'dev'


    #- name: 'Deploy WebApp'
    #  id: webappdeploy
    #  shell: pwsh
    #  run: |
    #    az extension add --name webapp
    #    $CONTAINER= "temporal-deploy"
    #    $expiry= (get-date).AddHours(1).ToUniversalTime().toString("yyyy-MM-dTH:mZ")
    #    #updaload the zip file to the storage account
    #    "Upload the code to the storage account"
    #    az storage blob upload -f vettx-webapi-api/webapi-api.zip --account-name $env:apistg -c $CONTAINER -n $env:apistg --overwrite -o none
    #    #Define the URL to the zip file and Deploy the webapp
    #    $ZIP_URL=az storage blob generate-sas --full-uri --permissions r --expiry $expiry --account-name $env:apistg -c $CONTAINER -n $env:apistg
    #    "Deploy the webapp"
    #    az webapp deploy --name $env:webapp --resource-group $env:rg_name --type zip --src-url  $ZIP_URL --async false -o none
    #    "Update the startup command"
    #    az webapp config set --name $env:webapp -g $env:rg_name --startup-file $env:startup_command -o none
    #    az webapp stop --name $env:webapp -g $env:rg_name -o none
    #    az webapp start --name $env:webapp -g $env:rg_name -o none